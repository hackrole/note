django项目自顶向下构造方式
==========================

:author: hackrole
:email: daipeng123456@gmail.com
:date: 2015-04-24 15:06:20
:tags: django, style

自顶向下构建
------------

在项目中严格遵守自顶向下的分层
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) 底层为高层提供服务和必要的细节屏蔽, 高层调用低层服务.

2) 同层的服务可以调用, 但也需要注意定义顺序,并避免循环调用的问题.

3) 更低一层不允许调用更高一层的服务.

4) 高层可以在必要的时候越过部分底层, 调用更底层服务.

5) 上层应该及可能把不易变更的操作委托给下层处理, 但是易于变更的操作应及可能在高层处理.

好处
~~~~

1) 代码和逻辑更清晰,易于扩展和维护

2) 避免循环引用的问题.

django的构建分层
----------------

分层列表
~~~~~~~~

1) 模板层

2) 视图层

3) 持久话层

4) form层(数据校验和渲染层)

5) utils层

6) rules层(业务逻辑层, 负责处理表的联动和业务判断等)

分层规则
~~~~~~~~

1) utils层处于最底层, 提供通用帮助函数/类.

2) 持久话层处于utils之上的最低层, 可能分为enums/和模型, 其中enums应该划分到utils层, 或介于utils层和持久化层之间.

3) rules 层处于 持久化层 之上

4) form层处于rules层之上,必要时可以越过rules, 直接使用持久化层

5) 视图层处于用户逻辑的最高层, 通过form层/rules层完成需要的功能.

6) 模板层处于 视图层和form层之间,但实际上应该对下应该是断层.

7) 比较难处理的是包装器和hooks等, 这些逻辑穿插在多个层中, 根据功能可以分到utils/rules之中. 实现上应该考虑再次拆分为两个层

8) celery离线任务应该处于rules层, 不应该在持久化层调用, 避免持久化层操作过载.
