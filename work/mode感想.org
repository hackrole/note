#+Author: hackrole
#+Email: daipeng123456@gmail.com
#+Date: 2014-01-03
#+TITLE: model实现感想


model，即模型，业务模型。
具体的大多数的后端开发领域，应该被叫数据模型,即将业务逻辑以某种形式存入特定的数据库中,

在数据层和业务层一般会有一个model层,稍大一些的项目都会考虑使用AR映射也架设model层，
而不是手写几个操作数据库的函数。


* AR的好处
在小的系统中,数据库处理较少,业务相对稳定的地方，AR并没有太多好书，反而会增加系统的复杂度，
性能也较原生的sql差不少, 无用操作较多，会无故的增加代码量也即工作量.

但是，在中，大型系统中，数据处理很多，业务不仅变化快，而且业务逻辑复杂，原声sql几乎可以认为是不能作为解决方案.
这时便体现出AR的好处了.

1> CURD包装，不在需要为所有操作写CURD,甚至在涉及多张表的操作中也能通过外键来完成, 工作效率与工作量上的质的变化
2> 代码可读性和可维护性提高
3> 良好设计的AR model可以很好的封装业务逻辑，减少程序错误。
4> 设计良好的AR类甚至可以改善错误调试，性能调试，日志记录等功能.
5> 注意AR model层一般和实际的业务逻辑仍有不少差异性，常见的实现中会在Controller层与model层添加一个中间层，
完成更复杂的业务处理,以协调变化controll和model层的变化


* 设计一个AR或是一些现有AR要考虑的问题

** 如何处理model类间的映射关系
1> 如何处理数据库中1v1, 1vN, Nv1,NvN映射关系
2> 如何处理外键关联查询，(延时载入与一次查询)

** 字段以何种实行存入model类中
处理方法名属性名与字段问题，防止字段冲突等问题发生。
一般的处理是默认取属性名做字段名，允许用元数据设置覆盖这一默认处理

** 多数据库支持与运行时绑定数据库
一般会提供配置多数据库的方法，并提供全局Connection对象，允许运行时制定不同的链接配置

** model类继承与抽象的概念
一个实现了继承与抽象概念的model类，有很多好处，尤其在mongodb这种弱关系型数据库中

以来可是实现共用字段的抽取，防止重复,

通过多继承实现函数Minix，包装入常用的处理函数,减少重复，提供程序的正交性,

** 元数据处理
字段元数据处理,字段约束，外键关联等
如何处理字段外的数据库元信息,如索引字段,数据库名，表名等

** 自定义约束
model级约束
字段级约束

** 批量操作实现
处理大量数据时非常有必要的实现

** 原生操作支持
在AR无法处理或难以处理时，提供一层直接访问原声操作的接口
